# -*- coding: utf-8 -*-
"""blinkit_analysis_ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_0kKIy8cjyDyiLiUb2T_xJBDFvuKs-W
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('blinkit_data.csv')

df.head(5)

df.info()

df.describe()

df.max()

df.min()

## ** DATA ANALYSIS  PYTHON PROJECT - BLINKIT ANALYSIS**

df.tail()

print("the size of the data ",df.shape)

print("the size of the data ",df.size)

df.dtypes

df['Item Fat Content'] = df['Item Fat Content'].replace({
    'LF': 'Low Fat',
    'low fat': 'Low Fat',
    'reg': 'Regular'
})

print(df['Item Fat Content'].unique())

### **BUISNESS REQUIREMENT**

total_sales = df['Sales'].sum()

#average sales
avg_sales =df['Sales'].mean()

#no. of items sold
no_of_items_sold = df['Sales'].count()

#averge ratings

average_ratings = df['Rating'].mean()

#display
print(f"total sales: ${total_sales:,.1f}")
print(f"average_sales: ${avg_sales:,.1f}")
print(f"average ratings: ${average_ratings:,.1f}")

#charts requirement

sales_by_fat = df.groupby('Item Fat Content')['Sales'].sum()
plt.pie(sales_by_fat,labels=sales_by_fat.index,autopct='%.1f%%',startangle=90)
plt.title('Sales by Fat Content')

plt.axis('equal')
plt.show()

# Total sales by item type
sales_by_type = df.groupby('Item Type')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
bars = plt.bar(sales_by_type.index, sales_by_type.values)

plt.xticks(rotation=-90)
plt.xlabel('Item Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Item Type')

# Corrected text annotation loop
for bar in bars:
    plt.text(bar.get_x() + bar.get_width() / 2,
             bar.get_height(),
             f'{bar.get_height():,.0f}',
             ha='center', va='bottom', fontsize=8)

plt.tight_layout()
plt.show()

#fat content by outlet in total sales

grouped = df.groupby(['Outlet Location Type', 'Item Fat Content'])['Sales'].sum().unstack()
grouped =grouped[['Regular', 'Low Fat']]
ax = grouped.plot(kind = 'bar', figsize=(8,5),title='Outlet Tier by Item Fat Content')
plt.xlabel('Outlet Location Tier')
plt.ylabel('Total Sales')
plt.legend(title='Item Fat Content')
plt.tight_layout()
plt.show()

#TOTAL SALES BY ESTABLISHMENT

sales_by_year = df.groupby('Outlet Establishment Year')['Sales'].sum().sort_index()

plt.figure(figsize=(9,5))
plt.plot(sales_by_year.index,sales_by_year.values, marker = 'o', linestyle ='-')

plt.xlabel('Oulet Establisment Yead')
plt.ylabel('Total Sales')
plt.title('Oultet Establishment')

for x,y in zip(sales_by_year.index, sales_by_year.values):
  plt.text(x,y,f'{y:,.0f}', ha ='center', va ='bottom', fontsize = 8)

plt.tight_layout()
plt.show()

#sales by outlet size

sales_by_size = df.groupby('Outlet Size')['Sales'].sum()

plt.figure(figsize=(4,4))
plt.pie(sales_by_size,labels=sales_by_size.index, autopct='%1.1f%%', startangle =90)
plt.title('Sales by Outler Size')
plt.tight_layout()
plt.show()

#sales by outlet location
sales_by_location = df.groupby('Outlet Location Type')['Sales'].sum().reset_index()
sales_by_location = sales_by_location.sort_values('Sales', ascending = False)

plt.figure(figsize=(8,3))
ax = sns.barplot(x='Sales', y ='Outlet Location Type',data=sales_by_location)
plt.title('Total Sales by Outlet Location')
plt.xlabel('Total Sales')
plt.ylabel('Outlet Location Type')
plt.ylabel('Outlet Location Type')

plt.tight_layout()
plt.show()

